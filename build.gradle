plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.google.cloud.tools.jib" version "3.4.2"
}

group = 'com.project-1hour'
version = '0.0.1-SNAPSHOT'

jib {
    from {
        image = 'openjdk:21-jdk'
    }
    to {
        def region = System.getenv('REGION')
        def projectId = System.getenv('PROJECT_ID')
        def artifactRegistry = System.getenv('ARTIFACT_REGISTRY')
        def service = System.getenv('SERVICE')

        image = String.format('%s-docker.pkg.dev/%s/%s/%s:latest', region, projectId, artifactRegistry, service)

        auth {
            username = '_json_key'
            password = System.getenv('GOOGLE_AR_CLIENT_SECRET') ?: ''
        }
    }
    container {

        def profilesActive = System.getenv('SPRING_PROFILES_ACTIVE')

        jvmFlags = [
                String.format('-Dspring.profiles.active=%s', profilesActive),
                '-Xms512m',
                '-Xmx512m'
        ]
    }
}

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

ext {
    snippetsDir = file('build/generated-snippets')
}

dependencies {
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.0.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // hibernate-spatial
    implementation 'org.hibernate.orm:hibernate-spatial'

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // db
    runtimeOnly 'com.mysql:mysql-connector-j'
    runtimeOnly 'com.h2database:h2'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // spring-rest-docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor:3.0.1'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc:3.0.1'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:3.0.1'

    // rest-assured
    testImplementation 'io.rest-assured:spring-mock-mvc:5.3.2'
}

task copySecret(type: Copy) {
    copy {
        from './submodule-backend'
        include '*.yml'
        into 'src/main/resources'
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

asciidoctor {
    configurations 'asciidoctorExt'
    sources {
        include("**/index.adoc")
    }
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir

    dependsOn test
}

task createDocument(type: Copy) {
    dependsOn asciidoctor

    from asciidoctor.outputDir
    into file("src/main/resources/static")
}

bootJar {
    dependsOn createDocument
}
